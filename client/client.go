// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Agent defines model for Agent.
type Agent struct {
	// Timestamp of runner first connection
	FirstConnected *time.Time `json:"first_connected,omitempty"`

	// Hostname for runner
	Hostname *string `json:"hostname,omitempty"`

	// Timestamp of runner last connection
	LastConnected *time.Time `json:"last_connected,omitempty"`

	// Timestamp of runner last job run
	LastUsed *time.Time `json:"last_used,omitempty"`

	// Name of runner (instance id)
	Name *string `json:"name,omitempty"`

	// Resource class for runner
	ResourceClass *string `json:"resource_class,omitempty"`

	// CircleCI Agent Version
	Version *string `json:"version,omitempty"`
}

// AgentList defines model for AgentList.
type AgentList struct {
	Items *[]Agent `json:"items,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Error message
	Message *string `json:"message,omitempty"`
}

// UnclaimedTaskCount defines model for UnclaimedTaskCount.
type UnclaimedTaskCount struct {
	UnclaimedTaskCount *int `json:"unclaimed_task_count,omitempty"`
}

// GenericError defines model for GenericError.
type GenericError Error

// GetRunnersParams defines parameters for GetRunners.
type GetRunnersParams struct {
	// filters the list of self-hosted runners by specific resource class.
	ResourceClass *string `json:"resource-class,omitempty"`

	// filters the list of self-hosted runners by namespace
	Namespace *string `json:"namespace,omitempty"`
}

// GetUnclaimedTasksParams defines parameters for GetUnclaimedTasks.
type GetUnclaimedTasksParams struct {
	// filters tasks by specific resource class.
	ResourceClass string `json:"resource-class"`
}

// GetRunningTasksParams defines parameters for GetRunningTasks.
type GetRunningTasksParams struct {
	// filters tasks by specific resource class.
	ResourceClass string `json:"resource-class"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRunners request
	GetRunners(ctx context.Context, params *GetRunnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnclaimedTasks request
	GetUnclaimedTasks(ctx context.Context, params *GetUnclaimedTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunningTasks request
	GetRunningTasks(ctx context.Context, params *GetRunningTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRunners(ctx context.Context, params *GetRunnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunnersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnclaimedTasks(ctx context.Context, params *GetUnclaimedTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnclaimedTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunningTasks(ctx context.Context, params *GetRunningTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunningTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRunnersRequest generates requests for GetRunners
func NewGetRunnersRequest(server string, params *GetRunnersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/runner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ResourceClass != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource-class", runtime.ParamLocationQuery, *params.ResourceClass); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Namespace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnclaimedTasksRequest generates requests for GetUnclaimedTasks
func NewGetUnclaimedTasksRequest(server string, params *GetUnclaimedTasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource-class", runtime.ParamLocationQuery, params.ResourceClass); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunningTasksRequest generates requests for GetRunningTasks
func NewGetRunningTasksRequest(server string, params *GetRunningTasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/running")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource-class", runtime.ParamLocationQuery, params.ResourceClass); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRunners request
	GetRunnersWithResponse(ctx context.Context, params *GetRunnersParams, reqEditors ...RequestEditorFn) (*GetRunnersResponse, error)

	// GetUnclaimedTasks request
	GetUnclaimedTasksWithResponse(ctx context.Context, params *GetUnclaimedTasksParams, reqEditors ...RequestEditorFn) (*GetUnclaimedTasksResponse, error)

	// GetRunningTasks request
	GetRunningTasksWithResponse(ctx context.Context, params *GetRunningTasksParams, reqEditors ...RequestEditorFn) (*GetRunningTasksResponse, error)
}

type GetRunnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentList
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetRunnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnclaimedTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnclaimedTaskCount
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetUnclaimedTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnclaimedTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunningTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnclaimedTaskCount
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetRunningTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunningTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRunnersWithResponse request returning *GetRunnersResponse
func (c *ClientWithResponses) GetRunnersWithResponse(ctx context.Context, params *GetRunnersParams, reqEditors ...RequestEditorFn) (*GetRunnersResponse, error) {
	rsp, err := c.GetRunners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunnersResponse(rsp)
}

// GetUnclaimedTasksWithResponse request returning *GetUnclaimedTasksResponse
func (c *ClientWithResponses) GetUnclaimedTasksWithResponse(ctx context.Context, params *GetUnclaimedTasksParams, reqEditors ...RequestEditorFn) (*GetUnclaimedTasksResponse, error) {
	rsp, err := c.GetUnclaimedTasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnclaimedTasksResponse(rsp)
}

// GetRunningTasksWithResponse request returning *GetRunningTasksResponse
func (c *ClientWithResponses) GetRunningTasksWithResponse(ctx context.Context, params *GetRunningTasksParams, reqEditors ...RequestEditorFn) (*GetRunningTasksResponse, error) {
	rsp, err := c.GetRunningTasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunningTasksResponse(rsp)
}

// ParseGetRunnersResponse parses an HTTP response from a GetRunnersWithResponse call
func ParseGetRunnersResponse(rsp *http.Response) (*GetRunnersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUnclaimedTasksResponse parses an HTTP response from a GetUnclaimedTasksWithResponse call
func ParseGetUnclaimedTasksResponse(rsp *http.Response) (*GetUnclaimedTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnclaimedTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnclaimedTaskCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetRunningTasksResponse parses an HTTP response from a GetRunningTasksWithResponse call
func ParseGetRunningTasksResponse(rsp *http.Response) (*GetRunningTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunningTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnclaimedTaskCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
